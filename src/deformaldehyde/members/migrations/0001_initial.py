# Generated by Django 2.0.7 on 2018-09-02 11:46

import ckeditor_uploader.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('dashboard', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=100, verbose_name='昵称')),
                ('mobile', models.CharField(blank=True, max_length=11, verbose_name='手机')),
                ('level', models.IntegerField(choices=[(0, '普通会员'), (1, '铜牌会员')], default=0, verbose_name='会员等级')),
                ('portrait', models.ImageField(default='upload/portrait/default.png', upload_to='upload/portrait', verbose_name='头像')),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='修改时间')),
                ('qq', models.CharField(blank=True, max_length=20, verbose_name='QQ')),
                ('wechat', models.CharField(blank=True, max_length=20, verbose_name='微信')),
                ('site', models.CharField(blank=True, max_length=20, verbose_name='站点')),
                ('intro', models.TextField(blank=True, max_length=500, verbose_name='公司简介')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '账号',
                'db_table': 'members_account',
                'verbose_name_plural': '账号',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, default='no-slug', max_length=160)),
                ('create_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='更新时间')),
                ('title', models.CharField(max_length=150, unique=True, verbose_name='标题')),
                ('wechat', models.CharField(max_length=20, verbose_name='微信')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='内容')),
                ('image', models.ImageField(help_text='注：首页广告轮播图尺寸为:宽800*长300; 首页广告图片尺寸为：宽280*长210', upload_to='article/2018/09/02', verbose_name='首图')),
                ('views', models.PositiveIntegerField(default=0, verbose_name='阅读量')),
                ('status', models.IntegerField(choices=[(0, '待审'), (2, '发布'), (3, '拒绝')], default=0, verbose_name='状态')),
                ('ad_property', models.IntegerField(choices=[(0, '非广告'), (1, '广告A区(6)'), (2, '广告B区(4)'), (3, '广告C区(推荐-11)'), (4, '广告D区(5)'), (5, '广告E区(文章-4)')], default=0, verbose_name='广告属性')),
                ('is_broadcast', models.IntegerField(choices=[(0, '否'), (1, '是')], default=0, verbose_name='是否广播')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.Account', verbose_name='账号')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Category', verbose_name='类别')),
                ('tags', models.ManyToManyField(blank=True, to='dashboard.Tag', verbose_name='标签')),
            ],
            options={
                'verbose_name': '货源',
                'db_table': 'members_article',
                'verbose_name_plural': '货源',
                'ordering': ['-update_time'],
            },
        ),
    ]
